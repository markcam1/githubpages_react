{"version":3,"sources":["logo.svg","component/Posts.js","actions/index.js","actions/types.js","component/PostForm.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","react_default","a","createElement","key","id","title","body","Component","protoTypes","PropTypes","func","isRequired","array","object","connect","state","items","item","dispatch","console","log","fetch","then","res","json","type","payload","PostForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onSubmit","e","setState","defineProperty","target","name","value","preventDefault","createPost","postData","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","className","src","logo","alt","component_PostForm","component_Posts","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04d0d0bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { fetchPosts } from '../actions'\r\n\r\nclass Posts extends Component {\r\n  componentWillMount() {\r\n    this.props.fetchPosts();\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.newPost) {\r\n      this.props.posts.unshift(nextProps.newPost)\r\n    }\r\n  }\r\n\r\n    render() {\r\n      const postItems = this.props.posts.map(post => (\r\n        <div key={post.id}>\r\n          <h3>{post.title}</h3>\r\n          <p>{post.body}</p>\r\n        </div>\r\n      ));\r\n    return (\r\n      <div>\r\n        <h1>Posts</h1>\r\n        {postItems}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPosts.protoTypes = {\r\n  fetchPosts: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  newPost: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item\r\n});\r\n\r\nexport default connect(mapStateToProps,{ fetchPosts })(Posts);","import { FETCH_POSTS, NEW_POSTS } from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    console.log('fetching fucker');\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        .then(posts => \r\n            dispatch({\r\n                type: FETCH_POSTS,\r\n                payload: posts\r\n            })\r\n        );\r\n};\r\n\r\nexport const createPost = (postData) => dispatch => {\r\n    console.log('action called createPost')\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n    .then(res => res.json())\r\n    .then(post => dispatch({\r\n        type: NEW_POSTS,\r\n        payload: post\r\n    }));\r\n};","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POSTS = 'NEW_POSTS';\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { createPost } from '../actions'\r\n\r\nclass PostForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const post = {\r\n            title: this.state.title,\r\n            body: this.state.body\r\n        }\r\n\r\n        this.props.createPost(post);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Add Posts</h1>\r\n                <form onSubmit={this.onSubmit} >\r\n                    <div>\r\n                        <label>Title: </label>\r\n                        <br />\r\n                        <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.onChange} />\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                        <label>Body: </label>\r\n                        <br />\r\n                        <textarea name=\"body\" value={this.state.body} onChange={this.onChange} />\r\n                    </div>\r\n                    <br />\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPostForm.propTypes = {\r\n    createPost: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, { createPost })(PostForm);","import { FETCH_POSTS, NEW_POSTS } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n}\r\n\r\nexport default  function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_POSTS:\r\n        console.log('reducer fuckers');\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            };\r\n        case NEW_POSTS:\r\n        console.log('np reducer fuckers');\r\n            return {\r\n                ...state,\r\n                item: action.payload\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState, \r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Posts from './component/Posts';\nimport PostForm from './component/PostForm';\n\nimport store from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <PostForm />\n        <hr />\n        <Posts />\n      </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}